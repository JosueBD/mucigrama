// Espera a que toda la página se cargue antes de ejecutar el código
document.addEventListener('DOMContentLoaded', () => {

    // --- VARIABLES GLOBALES ---
    const gridContainer = document.getElementById('grid-container');
    const titleElement = document.getElementById('mucigrama-title');
    const horizontalCluesContainer = document.getElementById('horizontal-clues');
    const verticalCluesContainer = document.getElementById('vertical-clues');
    let crosswordData = {}; // Un objeto para guardar toda la info del puzle

    // --- FUNCIÓN PRINCIPAL: CARGAR Y CONSTRUIR EL PUZLE ---

    // Usamos fetch para cargar el archivo JSON como si fuera una partitura
    fetch('puzle.json')
        .then(response => response.json()) // Convertimos la respuesta en un objeto que JS entiende
        .then(data => {
            crosswordData = data; // Guardamos los datos del puzle en nuestra variable global
            
            // Ahora que tenemos los datos, construimos todo
            document.title = crosswordData.titulo; // Cambiamos el título de la pestaña del navegador
            titleElement.textContent = crosswordData.titulo; // Cambiamos el H1 de la página
            
            generateGrid();
            displayClues();
            loadProgress(); // Intentamos cargar el progreso guardado
            addKeyboardNavigation(); // Activamos la navegación con teclado
        })
        .catch(error => {
            console.error("Error al cargar el archivo del crucigrama:", error);
            gridContainer.innerHTML = "<p>No se pudo cargar el mucigrama. Inténtalo de nuevo más tarde.</p>";
        });


    // --- FUNCIONES AUXILIARES ---

    function generateGrid() {
        const solution = crosswordData.solucion;
        gridContainer.style.gridTemplateColumns = `repeat(${solution[0].length}, 30px)`;

        solution.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
                const cellElement = document.createElement('input');
                cellElement.type = 'text';
                cellElement.maxLength = 1;
                cellElement.id = `cell-${rowIndex}-${colIndex}`;
                cellElement.classList.add('cell');

                if (cell === '0') {
                    cellElement.classList.add('black');
                    cellElement.disabled = true;
                } else {
                    // Evento que se dispara cada vez que el usuario escribe algo
                    cellElement.addEventListener('input', (e) => {
                        // Lo pone en mayúsculas
                        e.target.value = e.target.value.toUpperCase();
                        saveProgress(); // Guardamos el progreso con cada letra
                    });
                }
                gridContainer.appendChild(cellElement);
            });
        });
    }
    
    function displayClues() {
        // Limpiamos las pistas anteriores por si acaso
        horizontalCluesContainer.innerHTML = '';
        verticalCluesContainer.innerHTML = '';

        // Recorremos todas las pistas del archivo JSON
        for (const key in crosswordData.pistas) {
            const [number, direction] = key.split('-');
            const clueText = crosswordData.pistas[key];
            
            const clueElement = document.createElement('p');
            clueElement.innerHTML = `<b>${number}.</b> ${clueText}`;
            
            if (direction === 'horizontal') {
                horizontalCluesContainer.appendChild(clueElement);
            } else {
                verticalCluesContainer.appendChild(clueElement);
            }
        }
    }

    // MEJORA: Guardar el progreso en la memoria del navegador
    function saveProgress() {
        const progress = {};
        const cells = document.querySelectorAll('.cell:not(.black)');
        cells.forEach(cell => {
            if (cell.value) {
                progress[cell.id] = cell.value;
            }
        });
        localStorage.setItem(crosswordData.titulo, JSON.stringify(progress));
    }

    // MEJORA: Cargar el progreso guardado
    function loadProgress() {
        const savedProgress = localStorage.getItem(crosswordData.titulo);
        if (savedProgress) {
            const progress = JSON.parse(savedProgress);
            for (const cellId in progress) {
                const cell = document.getElementById(cellId);
                if (cell) {
                    cell.value = progress[cellId];
                }
            }
        }
    }

    // MEJORA: Navegación con las flechas del teclado
    function addKeyboardNavigation() {
        document.addEventListener('keydown', (e) => {
            const activeElement = document.activeElement;
            if (!activeElement.classList.contains('cell')) return;

            const [_, rowStr, colStr] = activeElement.id.split('-');
            let row = parseInt(rowStr);
            let col = parseInt(colStr);

            let nextCell;

            switch (e.key) {
                case 'ArrowUp':
                    nextCell = findNextAvailableCell(row, col, -1, 0);
                    break;
                case 'ArrowDown':
                    nextCell = findNextAvailableCell(row, col, 1, 0);
                    break;
                case 'ArrowLeft':
                    nextCell = findNextAvailableCell(row, col, 0, -1);
                    break;
                case 'ArrowRight':
                    nextCell = findNextAvailableCell(row, col, 0, 1);
                    break;
                default:
                    return; // Si no es una flecha, no hacemos nada
            }
            
            if (nextCell) {
                e.preventDefault(); // Evita que la página se mueva
                nextCell.focus(); // Mueve el foco a la siguiente celda
            }
        });
    }
    
    // Función que ayuda a la navegación a encontrar la próxima celda válida
    function findNextAvailableCell(startRow, startCol, dRow, dCol) {
        let currentRow = startRow + dRow;
        let currentCol = startCol + dCol;

        const maxRows = crosswordData.solucion.length;
        const maxCols = crosswordData.solucion[0].length;

        while (currentRow >= 0 && currentRow < maxRows && currentCol >= 0 && currentCol < maxCols) {
            const cellId = `cell-${currentRow}-${currentCol}`;
            const cell = document.getElementById(cellId);
            if (cell && !cell.disabled) {
                return cell; // Encontramos una celda válida
            }
            // Si no, seguimos buscando en la misma dirección
            currentRow += dRow;
            currentCol += dCol;
        }
        return null; // No se encontró ninguna celda en esa dirección
    }
});
